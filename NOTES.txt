When a developer requires a specific scope (such as region), this scope must be present in wp_options. The developer should just be able to instantiate a WPScope object and load the scope.
<code>
$region_scope = new WPScope('region'); // false or ArrayScope object
<code>


In the management interface, when a plugin is loaded which requires a scope, it should be loaded or created. Maybe I need to setup a quick option which has the required scopes listed in it (should be managed by oac-base plugin.)


$required_scope = array('region', 'crops');

function set_required_scope( $required_scopes ) {
	$oac_required_scopes = get_option('oac_required_scopes', array());
	if( is_array( $required_scopes ) ):
		$new_scopes = array_filter( $required_scopes, function( $item ) {
			return ( ! in_array( $item, $required_scopes ) );
		});
		$region_scope = new WPScope($item);
		$region_scope->save();
		if( count( $news_scopes ) > 0 ) {
			array_map( function( $item ) {
				$oac_required_scopes[] = $item;
			}, $new_scopes );
		}
	else:
		if( ! in_array( $required_scopes, $oac_required_scopes ) ) {
			$oac_required_scopes[] = $required_scopes;
		}
	endif;
	update_option('oac_required_scopes', $oac_required_scopes );
}


Next information:

Should I do the following:

oac_required_scopes('region'=>array('climate-risk', 'strawberry-tool', 'chill-tool'))
x
So that a scope has knowledge of what uses it. At the same time, when a tool is disabled or enabled,
it gets added and removed from this scope (with no duplicates). This way, when all the tools of a scope are removed, a user could be prompted to remove the unused scope (and at the same time, it CAN be kept, for whatever reason).

NECESSARY API

WPScoper
new() -> __construct__ and WPScoper() (PHP Compat)
save() -> write to wp_options
delete() -> remove from wp_options;
remove_item() -> remove an entry from the scope
add_entry() -> add a new entry
update_entry() -> update an existing entry
add_depth () -> add a new level to the scope